<?php
/* This file has been generated by the Parsian parser generator 
 * (see http://github.com/thomasbollmeier/parsian)
 * 
 * DO NOT EDIT THIS FILE!
 */
namespace tbollmeier\webappfound\routing;

use tbollmeier\parsian as parsian;
use tbollmeier\parsian\output\Ast;


class RoutesBaseParser extends parsian\Parser
{
    public function __construct()
    {
        parent::__construct();

        $this->configLexer();
        $this->configGrammar();
    }

    private function configLexer()
    {

        $lexer = $this->getLexer();

        $lexer->addCommentType("%", "\n");


        $lexer->addSymbol("<-", "LARROW");
        $lexer->addSymbol("/", "SLASH");
        $lexer->addSymbol("<", "LBRA");
        $lexer->addSymbol(">", "RBRA");
        $lexer->addSymbol(":", "COLON");
        $lexer->addSymbol("#", "HASH");

        $lexer->addTerminal("/[_a-zA-Z][_a-zA-Z0-9\-]*/", "PATH_SEGMENT");
        $lexer->addTerminal("/[_a-zA-Z][_a-zA-Z0-9]*/", "ID");

        $lexer->addKeyword("controller");
        $lexer->addKeyword("end");
        $lexer->addKeyword("default");
        $lexer->addKeyword("action");
        $lexer->addKeyword("actions");
        $lexer->addKeyword("end");
        $lexer->addKeyword("get");
        $lexer->addKeyword("post");
        $lexer->addKeyword("put");
        $lexer->addKeyword("delete");
        $lexer->addKeyword("int");

    }

    private function configGrammar()
    {

        $grammar = $this->getGrammar();

        $grammar->rule("controllers",
            $this->seq_1(),
            true);
        $grammar->rule("controller",
            $this->seq_2(),
            false);

        $grammar->setCustomRuleAst("controller", function (Ast $ast) {
            $res = new Ast("controller", "");
            $local_1 = new Ast("name", $ast->getChildrenById("name")[0]->getText());
            $res->addChild($local_1);
            $local_2 = $ast->getChildrenById("acts")[0];
            $local_2->clearId();
            $res->addChild($local_2);
            return $res;
        });

        $grammar->rule("default_action_def",
            $this->seq_3(),
            false);

        $grammar->setCustomRuleAst("default_action_def", function (Ast $ast) {
            $res = new Ast("default_action", "");
            $local_1 = new Ast("controller", $ast->getChildrenById("controller")[0]->getText());
            $res->addChild($local_1);
            $local_2 = new Ast("action", $ast->getChildrenById("action")[0]->getText());
            $res->addChild($local_2);
            return $res;
        });

        $grammar->rule("actions",
            $this->seq_4(),
            false);

        $grammar->setCustomRuleAst("actions", function (Ast $ast) {
            $res = new Ast("actions", "");
            foreach ($ast->getChildrenById("act") as $local_1) {
                $local_1->clearId();
                $res->addChild($local_1);
            }
            return $res;
        });

        $grammar->rule("action",
            $this->seq_5(),
            false);

        $grammar->setCustomRuleAst("action", function (Ast $ast) {
            $res = new Ast("action", "");
            $local_1 = new Ast("name", $ast->getChildrenById("name")[0]->getText());
            $res->addChild($local_1);
            $local_2 = $ast->getChildrenById("meth")[0];
            $local_2->clearId();
            $res->addChild($local_2);
            $local_3 = $ast->getChildrenById("url")[0];
            $local_3->clearId();
            $res->addChild($local_3);
            return $res;
        });

        $grammar->rule("method",
            $this->alt_1(),
            false);

        $grammar->setCustomRuleAst("method", function (Ast $ast) {
            $child = $ast->getChildren()[0];
            $child->clearId();
            return $child;
        });

        $grammar->rule("url",
            $this->alt_2(),
            false);

        $grammar->setCustomRuleAst("url", function (Ast $ast) {
            $res = new Ast("url", "");
            foreach ($ast->getChildrenById("seg") as $local_1) {
                $local_1->clearId();
                $res->addChild($local_1);
            }
            return $res;
        });

        $grammar->rule("segment",
            $this->alt_3(),
            false);

        $grammar->setCustomRuleAst("segment", function (Ast $ast) {
            $child = $ast->getChildren()[0];
            $child->clearId();
            return $child;
        });

        $grammar->rule("param",
            $this->seq_7(),
            false);
        $grammar->rule("type",
            $grammar->term("INT"),
            false);

        $grammar->setCustomRuleAst("type", function (Ast $ast) {
            $child = $ast->getChildren()[0];
            $child->clearId();
            return $child;
        });


    }

    private function alt_1()
    {
        $grammar = $this->getGrammar();

        return $grammar->alt()
            ->add($grammar->term("GET"))
            ->add($grammar->term("POST"))
            ->add($grammar->term("PUT"))
            ->add($grammar->term("DELETE"));
    }

    private function alt_2()
    {
        $grammar = $this->getGrammar();

        return $grammar->alt()
            ->add($grammar->oneOrMore($this->seq_6()))
            ->add($grammar->term("SLASH"));
    }

    private function alt_3()
    {
        $grammar = $this->getGrammar();

        return $grammar->alt()
            ->add($grammar->term("PATH_SEGMENT"))
            ->add($grammar->ruleRef("param"));
    }


    private function seq_1()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->oneOrMore($grammar->ruleRef("controller")))
            ->add($grammar->opt($grammar->ruleRef("default_action_def")));
    }

    private function seq_2()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("CONTROLLER"))
            ->add($grammar->term("ID", "name"))
            ->add($grammar->ruleRef("actions", "acts"))
            ->add($grammar->term("END"));
    }

    private function seq_3()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("DEFAULT"))
            ->add($grammar->term("ACTION"))
            ->add($grammar->term("ID", "controller"))
            ->add($grammar->term("HASH"))
            ->add($grammar->term("ID", "action"));
    }

    private function seq_4()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("ACTIONS"))
            ->add($grammar->oneOrMore($grammar->ruleRef("action", "act")))
            ->add($grammar->term("END"));
    }

    private function seq_5()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("ID", "name"))
            ->add($grammar->term("LARROW"))
            ->add($grammar->ruleRef("method", "meth"))
            ->add($grammar->ruleRef("url", "url"));
    }

    private function seq_6()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("SLASH"))
            ->add($grammar->ruleRef("segment", "seg"));
    }

    private function seq_7()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("LBRA"))
            ->add($grammar->term("ID", "name"))
            ->add($grammar->opt($this->seq_8()))
            ->add($grammar->term("RBRA"));
    }

    private function seq_8()
    {
        $grammar = $this->getGrammar();

        return $grammar->seq()
            ->add($grammar->term("COLON"))
            ->add($grammar->ruleRef("type", "ty"));
    }


}
